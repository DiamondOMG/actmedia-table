export const dynamic = "force-dynamic";

import { NextResponse } from "next/server";
import { getSheetsClient } from "@/lib/googleSheetsClient";
import { v4 as uuidv4 } from "uuid";
import bcrypt from "bcryptjs";
import { Redis } from "@upstash/redis";

const SHEET_ID = process.env.GOOGLE_SHEET_ID!;
const SHEET_NAME = "Users";
const redis = Redis.fromEnv();
const CACHE_KEY = "cached_users_data";

export async function POST(req: Request) {
  const sheets = await getSheetsClient();
  const { username, password, name, department, position } = await req.json();

  // ‚úÖ Default permissions
  const defaultPermissions = [
    { menu: "user", level: 1 },
    { menu: "campaign", level: 1 },
    { menu: "request", level: 1 },
    { menu: "sequence", level: 1 },
    { menu: "customer", level: 1 },
  ];

  // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡∏ã‡πâ‡∏≥
  const checkResponse = await sheets.spreadsheets.values.get({
    spreadsheetId: SHEET_ID,
    range: `${SHEET_NAME}!A2:I`, // 9 columns ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  });

  const users = checkResponse.data.values || [];
  if (users.some((row) => row[1] === username && row[8] !== "1")) {
    return NextResponse.json(
      { error: "Username already exists" },
      { status: 400 }
    );
  }

  // üîê Hash password
  const hashedPassword = await bcrypt.hash(password, 10);

  // üßæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
  const newUser = [
    uuidv4(), // A: id
    username, // B
    hashedPassword, // C
    name, // D
    department, // E
    position, // F
    JSON.stringify(defaultPermissions), // G: permissions
    Date.now(), // H: createdOn
    "0", // I: isDelete
  ];

  // ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
  await sheets.spreadsheets.values.append({
    spreadsheetId: SHEET_ID,
    range: `${SHEET_NAME}!A2`,
    valueInputOption: "USER_ENTERED",
    requestBody: { values: [newUser] },
  });

  // ‚ôªÔ∏è ‡∏•‡∏ö cache
  await redis.del(CACHE_KEY);

  return NextResponse.json({ message: "User registered successfully" });
}
